--- # paragrapher un texte contenant des <p> mal fermes
    #

-
    # trim
    type: all
    is_callback: y
    replace: trim

toujours-paragrapher:
    # Ajouter un <p> au debut pour assurer d'avoir toujours un paragraphe
    # anuler cette regle pour revenir a l'ancien comportement de SPIP
    type: all
    replace: "<p>\0"

-
    # Ajouter un espace aux <p> et un "STOP P"
    # transformer aussi les </p> existants en <p>, nettoyes ensuite
    if_str: "<"
    #if_match: ",<p\b,iS"
    match: "/^.*$/msS"
    replace: "<p>\0<STOP P>"

-
    if_str: "<"
    #if_match: ",<p\b,iS"
    match: ",</?p\b\s?(.*?)>,iS"
    replace: "<STOP P><p \1>"

-
    # Fermer les paragraphes
    # y compris sur "STOP P"
    # en reperant les balises blocs XHTML
    if_str: "<"
    match: ",(<p\s.*)(</?(STOP P|div|pre|ul|ol|li|blockquote|h[1-6r]|t(able|[rdh]|body|foot|extarea)|form|object|center|marquee|address|d[ltd]|script|noscript|map|button|fieldset|style)[>[:space:]]),UimsS"
    replace: "\n\1</p>\n\2"

-
    # Supprimer les marqueurs "STOP P"
    match: "<STOP P>"
    replace: ''
    type: str

-
    # Reduire les blancs dans les <p> 1/2
    match: ",(<p\b.*>)\s*,UiuS"
    replace: "\1"

-
    # Reduire les blancs dans les <p> 2/2
    match: ",\s*(</p\b.*>),UiuS"
    replace: "\1"

-
    # Supprimer les <p xx></p> vides
    match: ",<p\b[^<>]*></p>\s*,iuS"
    replace: ""

-
    # Renommer les paragraphes normaux
    match: "<p >"
    replace: "<p>"
    type: str

