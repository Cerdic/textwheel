--- # Syntaxe des raccourcis SPIP, version 0.0.1
    #
    # Si on nomme une regle, elle devient surchargeable

spip-init-trim:
  # trim
  type: all
  is_callback: y
  replace: trim
  priority: -40 # avant tout

spip-init-saut:
  type: all
  replace: "\n\0"
  priority: -40

spip-tableaux:
  type: all
  # included subwheel with relative filepath
  replace: spip-tableaux.yaml
  is_wheel: Y
  if_str: "\n|"
  priority: -30 # avant les raccourcis

spip-listes:
  match: "/\n-[*#]/S"
  replace: replace_listes
  if_str: "\n-"
  is_callback: Y
  type: all
  priority: -20 # avant !spip-paragraphes

spip-echappe-tags:
  # voir spip-restaure-tags plus bas
  match: ",</?[a-z!][^<>]*[{}_-][^<>]*>,imsS"
  if_chars: "<"
  priority: -20 # avant !spip-paragraphes
  is_wheel: Y
  replace:
    -
      if_chars: "{}_-"
      match: ['{', '}', '_', '-']
      replace: ["\x1", "\x2", "\x3", "\x4"]
      type: str

spip-ligne-horizontale:
  match: "/\n(----+|____+)/S"
  replace: "\n\n\n<hr class=\"spip\" />\n\n\n"
  if_chars: "\n"
  priority: -20 # avant !spip-paragraphes

spip-alinea:
  match: "/\n-- */"
  replace: "\n<br />&mdash;&nbsp;"
  if_str: "\n--"
  priority: -20 # avant !spip-paragraphes

spip-puce:
  match: "/\n- */S"
  replace: replace_puce
  if_str: "\n-"
  is_callback: Y
  priority: -20 # avant !spip-paragraphes

spip-br:
  match: "/\n_ +/S"
  replace: "\n<br />"
  if_str: "\n_"
  priority: -20 # avant !spip-paragraphes

spip-intertitres-compliques:
  # raccourcis imbriques en {{{{..}}}}
  # intertitres
  match: ['/(^|[^{])[{][{][{]/S', '/[}][}][}]($|[^}])/S']
  replace: ["$1\n\n\n<h3 class=\"spip\">", "</h3>\n\n\n$1"]
  if_str: '}}}}'

spip-intertitres:
  # raccourcis en {{{..}}}
  # intertitres
  match: ['{{{', '}}}']
  replace: ["\n\n\n<h3 class=\"spip\">", "</h3>\n\n\n"]
  if_str: '{{{'
  type: str

spip-gras:
  # raccourcis en {{..}}
  # strong
  match: ['{{', '}}']
  replace: ['<strong>', '</strong>']
  type: str
  if_str: '{{'

spip-italiques:
  # raccourcis en {..}
  # strong
  match: ['{', '}']
  replace: ['<i>', '</i>']
  type: str
  if_str: '{'

spip-paragraphes:
  # paragraphes
  # lignes vides consecutives, br imbriques dans des p
  match: ["/(( *)\n){2,}(<br\s*\/?>)?/S", '/(?:<br\s*\/?>){2,}/S', "/<p>\n*(?:<br\s*\/?>\n*)*/S"]
  replace: ['<p>', '<p>', '<p>']
  priority: 0

quote-intro:
  # raccourci <quote>
  # + suppression de <intro>
  match: ['<quote>', '</quote>', '<intro>', '</intro>']
  replace: ['<blockquote class="spip"><p>', '</blockquote><p>', '', '']
  if_chars: '<'
  type: str

-
  # eliminer les br restant en debut de texte
  match: '@^\n<br />@S'
  replace: ''
  if_str: "\n<br"
  priority: -20 # avant !spip-paragraphes


spip-poesie:
  # poesie|poetry
  # utilise une callback
  # a affiner en *decrivant* la callback? (replace:spip-poesie.yaml, pick:2)
  match: ",<poe(sie|try)>(.*)</poe\1>,UimsS"
  replace: replace_poesie
  is_callback: Y
  if_str: '<poe'
  priority: -40

spip-restaure-tags:
  # voir spip-echappe-tags ci-dessus
  if_chars: "\x1\x2\x3\x4"
  match: ["\x1", "\x2", "\x3", "\x4"]
  replace: ['{', '}', '_', '-']
  type: str
